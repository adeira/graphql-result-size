schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  me: User
  scalar: String
  scalarNonNull: String!
  union: MyUnion
  list(first: Int, last: Int): [String]
  enum: MyEnum
  node(id: ID!): Node
}

enum MyEnum {
  URGENT
  IMPORTANT
}

union MyUnion = User | PageInfo

interface Node {
  id: ID!
}

# TODO: implement 2 interfaces (XYZ & ABC)
type User implements Node {
  id: ID!
  name: String
  surname: String
  friends(first: Int, last: Int): [User]
  friendsConnection(first: Int): FriendsConnection
}

type FriendsConnection {
  count: Int
  edges: [FriendsEdge]
  pageInfo: PageInfo!
}

type FriendsEdge {
  cursor: String
  node: User
}

type PageInfo {
  hasPreviousPage: Boolean
  hasNextPage: Boolean
  endCursor: String
  startCursor: String
}

type Mutation {
  mutationScalar: String
}

type Subscription {
  subscriptionScalar: String
}
